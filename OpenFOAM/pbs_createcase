#!/bin/bash
# This used qsub to create an OpenFOAM case
# We make use of the qsub -v options to create a case with a name and reference a model
#  Note: full path is required for model (~/ doesn't work for some reason)
# e.g. qsub -v name=salt2014 -v vespa=/home/paulmc/workarea/vespaCutDown.stl pbs_createcase
#PBS -N Create_$name
#PBS -l nodes=1:ppn=2:gpus=2,mem=96000MB
#PBS -l walltime=02:00:00
#PBS -m abe
# Set up the environment for OpenFOAM and VespaCFD utils
module purge
module load openfoam/2.1.1
module load vtk/6.0.0
. $foamDotFile

if [[ -z "$name" ]] 
then
  echo "Need to specify name! "
  echo " Use the v option e.g. -v name=salt2014 vespa=~/Vespa.stl"
  exit 1
fi

cd $PBS_O_WORKDIR
# RUNDIR is where the case is run
RUNDIR=~/workarea/vespaFoamRuns/$name
echo mkdir $RUNDIR
# TODO: Should really fail here if the directory exists (or add a timestamp)
mkdir $RUNDIR

VESPALABSSRC=~/workarea/Vespa-Labs/OpenFOAM
# MODEL is the fully assembled Vespa model
# We can pass our own model on he command line with the option -v vespa=
MODEL=~/workarea/motorBike.stl
if [[ -z "$vespa" ]]
then
  echo "Using a default model"
else
  echo "Using a new Vespa model so we will check the mesh"
  echo $vespa
  echo "mkdir $RUNDIR/vespaLab"
  mkdir $RUNDIR/vespaLab   
  echo surfaceConvert -clean $vespa $RUNDIR/vespaLab/motorBike.stl
  surfaceConvert -clean $vespa $RUNDIR/vespaLab/motorBike.stl | grep illegal
  echo surfaceCheck  $RUNDIR/vespaLab/motorBike.stl  | grep illegal
  surfaceCheck  $RUNDIR/vespaLab/motorBike.stl  | grep illegal
  MODEL=$RUNDIR/vespaLab/motorBike.stl
fi

# Making copy of MotorBike Tutorial in the run location
echo "Copy vanila case to $RUNDIR"
cp -r $VESPALABSSRC/common/motorBike/* $RUNDIR/

echo "Update vanila case with new values..."
echo 
echo "- Changing blockMeshDict to make the grid larger and resolution finer"
cp -f $VESPALABSSRC/common/motorBike_changes/constant/polyMesh/blockMeshDict $RUNDIR/constant/polyMesh/blockMeshDict
echo "- Changing forceCoeffs to increase speed and change reference area"
cp -f $VESPALABSSRC/common/motorBike_changes/system/forceCoeffs $RUNDIR/system/forceCoeffs
echo "- Changing snappyHexMeshDict to get resolution finer around STL mesh"
cp -f $VESPALABSSRC/common/motorBike_changes/system/snappyHexMeshDict $RUNDIR/system/snappyHexMeshDict
echo "- Changing initialConditions to increase speed"
cp -f $VESPALABSSRC/common/motorBike_changes/0.org/include/initialConditions $RUNDIR/0.org/include/initialConditions
echo "- Changing the run and clean scripts"
cp -f $VESPALABSSRC/common/motorBike_changes/Allclean $RUNDIR/
cp -f $VESPALABSSRC/common/motorBike_changes/Allrun $RUNDIR/
echo "- Copying across the model"
echo "cp -f $MODEL $RUNDIR/constant/triSurface/"
cp -f $MODEL $RUNDIR/constant/triSurface/
echo
echo "- Copying pbs script to job run location and running qsub from that dir"
cp -f $VESPALABSSRC/common/run_openfoam $RUNDIR/
echo "- Create ParaView entry file for visualisation"
touch $RUNDIR/$name.foam
cd $RUNDIR

echo Calculate Frontal Area and update case...
# assumes that CalculateFrontalArea is compiled and in the path

# If we need to start an XServer use this...
# xinit `which CalculateFrontalArea` $MODEL 20 1000 0 0 | grep "area   :" | awk '{ print $3}' > $RUNDIR/AREA
# If XServer is running use this...
env DISPLAY=:0 CalculateFrontalArea  $MODEL 20 1000 0 0 | grep "area   :" | awk '{ print $3}' > $RUNDIR/AREA
# comment out old value
sed -i "s/Aref/\/\/ original Aref/g" system/forceCoeffs
# Append new value after above
sed -i "/original Aref/ a\    Aref        `cat AREA`; \/\/ CalculateFrontalArea value" system/forceCoeffs

# Since OpenFOAM chews through a lot of memory doing meshing we'll do the mesh here also
./Allclean
# Below are some steps from the original Allrun script
# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions
cp -r 0.org 0 > /dev/null 2>&1
runApplication blockMesh
runApplication snappyHexMesh -overwrite
runApplication potentialFoam -noFunctionObjects -writep
module purge
module load massive
qsub -N $name run_openfoam
